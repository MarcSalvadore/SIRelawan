variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  POSTGRES_DB: postgres
  POSTGRES_HOST: aws-0-ap-southeast-1.pooler.supabase.com
  POSTGRES_PORT: 5432
  POSTGRES_USER: $JDBC_DATABASE_USERNAME
  POSTGRES_PASSWORD: $JDBC_DATABASE_PASSWORD
  REGISTRY_USER: $REGISTRY_USER
  IMAGE_NAME: $IMAGE_NAME
  IMAGE_TAG: latest
  CONTAINER_NAME: $CONTAINER_NAME
  GCP_USERNAME: $GCP_USERNAME
  GCP_STATIC_IP: $GCP_STATIC_IP

stages:
  - build
  - publish
  - deploy

Build:
  stage: build
  image: gradle:jdk17-alpine
  before_script:
    - echo pwd
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle wrapper
    - ./gradlew assemble
    - ls
    - echo "Creating .env file..."
    - echo "SIMAK_SECRET=$SIMAK_SECRET" >> .env
    - echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> .env
    - echo "DEFAULT_PASSWORD=$DEFAULT_PASSWORD" >> .env
    - cat .env # Display the content of .env for verification
  artifacts:
    when: always
    paths:
      - build/libs/*.jar
      - .env
    expire_in: 1 week
  only:
    - master

Publish:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - Build
  before_script:
    - echo $DOCKER_PASSWORD| docker login -u $REGISTRY_USER --password-stdin docker.io
  script:
    - echo "Creating .env file..."
    - echo "SIMAK_SECRET=$SIMAK_SECRET" >> .env
    - echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> .env
    - echo "DEFAULT_PASSWORD=$DEFAULT_PASSWORD" >> .env
    - cat .env
    - ls
    - docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME -t $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG
  tags:
    - dind
  only:
    - master

Deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - chmod 400 $SSH_KEY
    - apk update && apk add openssh-client
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $GCP_USERNAME@$GCP_STATIC_IP "
      docker container rm -f $CONTAINER_NAME || true &&
      docker image rm -f $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG || true &&
      docker run --name $CONTAINER_NAME -d -p 10001:8080 -e SIMAK_SECRET=$SIMAK_SECRET -e ADMIN_PASSWORD=$ADMIN_PASSWORD -e DEFAULT_PASSWORD=$DEFAULT_PASSWORD $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG"
  only:
    - master